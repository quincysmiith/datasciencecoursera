install.packages("mime")
Sys.getenv("R_LIBS_USER")
install.packages("mime")
install.packages("mime")
install.packages("knitr")
install.packages("forecast")
install.packages("data.table")
install.package("slidify")
install.packages("slidify")
install.packages("devtools")
source("http://bioconductor.org/biocLite.R")
biocLite()
install.packages("ggplot2")
install.packages(KernSmooth)
install.packages("KernSmooth")
library(KErnSmooth)
library(KernSmooth)
library("KernSmooth")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("devtools")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("ggplot2")
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
install.packages("shiny")
install.packages("tm")
install.packages("SnowballC")
install.packages("flexclust")
install.packages("tm")
install.packages("tm")
install.packages("SnowballC")
install.packages("flexclust")
install.packages("ggplot2")
install.packages("maps")
install.packages("ggmap")
install.packages("igraph")
install.packages("wordcloud")
install.packages("RColorBrewer")
x <- 1
print(x)
x
cube <- function(x,n){
x^3
}
cube(3)
library(datasets)
data(iris)
?iris
type(iris)
dimnames(iris)
library(datasets)
data(iris)
data <- dimnames(iris)
library(datasets)
data(iris)
?iris
head(iris)
str(iris)
lapply(s,mean, s$Sepal.Length)
s <- split(iris, iris$Species)
lapply(s,mean, s$Sepal.Length)
lapply(s, function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width")]))
lapply(s, function(x) mean(x[, c("Sepal.Length", "Sepal.Width")]))
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
library(datasets)
data(mtcars)
head(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(mpg, gear, mean))
summary(mtcars)
s <- with(mtcars, tapply(mpg, cyl, mean))
s
s[1]
s[1][1]
s[1] - s[2]
s[1] - s[3]
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
s <- with(mtcars, tapply(hp, cyl, mean))
s[1] - s[3]
?inv
?solve
setwd("~/Documents/datasciencecoursera/R programming/Week 4/Week 4 Programming assignment/rprog_data_ProgAssignment3-data")
best <- function(state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = 'character')
## Check that state and outcome are valid
valid_state <- FALSE
for (i in unique(data$State)){
if(i == state){
valid_state <- TRUE
}
}
outcome_list <- as.list(c("heart attack", "heart failure", "pneumonia"))
valid_outcome <- FALSE
for (i in outcome_list){
if(i == outcome){
valid_outcome <- TRUE
}
}
if (valid_state == FALSE){
stop("invalid state")
}
if(valid_outcome == FALSE){
stop("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death
## rate
if(outcome == "heart attack"){
my_column <- 11
}
if(outcome == "heart failure"){
my_column <- 17
}
if(outcome == "pneumonia"){
my_column <- 23
}
subset1 <- data[data$State == state, c(2, my_column)]
subset1 <- subset1[order(subset1[,2]),]
subset1$Hospital.Name[1]
}
best('MD', pneumonia)
best('MD', 'pneumonia')
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = 'character')
names(outcome)
test <- best('MD', 'pneumonia')
best <- function(state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = 'character')
## Check that state and outcome are valid
valid_state <- FALSE
for (i in unique(data$State)){
if(i == state){
valid_state <- TRUE
}
}
outcome_list <- as.list(c("heart attack", "heart failure", "pneumonia"))
valid_outcome <- FALSE
for (i in outcome_list){
if(i == outcome){
valid_outcome <- TRUE
}
}
if (valid_state == FALSE){
stop("invalid state")
}
if(valid_outcome == FALSE){
stop("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death
## rate
if(outcome == "heart attack"){
my_column <- 11
}
if(outcome == "heart failure"){
my_column <- 17
}
if(outcome == "pneumonia"){
my_column <- 23
}
subset1 <- data[data$State == state, c(2, my_column)]
subset1 <- subset1[order(subset1[,2]),]
#subset1$Hospital.Name[1]
}
test <- best('MD', 'pneumonia')
View(test)
test[2,]
test[,2]
best <- function(state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = 'character')
## Check that state and outcome are valid
valid_state <- FALSE
for (i in unique(data$State)){
if(i == state){
valid_state <- TRUE
}
}
outcome_list <- as.list(c("heart attack", "heart failure", "pneumonia"))
valid_outcome <- FALSE
for (i in outcome_list){
if(i == outcome){
valid_outcome <- TRUE
}
}
if (valid_state == FALSE){
stop("invalid state")
}
if(valid_outcome == FALSE){
stop("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death
## rate
if(outcome == "heart attack"){
my_column <- 11
}
if(outcome == "heart failure"){
my_column <- 17
}
if(outcome == "pneumonia"){
my_column <- 23
}
data[,my_column] <- as.numeric(data[,my_column])
subset1 <- data[data$State == state, c(2, my_column)]
subset1 <- subset1[order(subset1[,2]),]
subset1$Hospital.Name[1]
}
test <- best('MD', 'pneumonia')
best('MD', 'pneumonia')
source("submitscript3.R")
submit()
nrows(outcome)
nrow(outcome)
outcome[2,]
outcome[5000,]
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = 'character')
## Check that state and outcome are valid
valid_state <- FALSE
for (i in unique(data$State)){
if(i == state){
valid_state <- TRUE
}
}
outcome_list <- as.list(c("heart attack", "heart failure", "pneumonia"))
valid_outcome <- FALSE
for (i in outcome_list){
if(i == outcome){
valid_outcome <- TRUE
}
}
if (valid_state == FALSE){
stop("invalid state")
}
if(valid_outcome == FALSE){
stop("invalid outcome")
}
## Return hospital name in that state with the given rank
## 30-day death rate
if(outcome == "heart attack"){
my_column <- 11
}
if(outcome == "heart failure"){
my_column <- 17
}
if(outcome == "pneumonia"){
my_column <- 23
}
data[,my_column] <- as.numeric(data[,my_column])
subset1 <- data[data$State == state, c(2, my_column)]
subset1 <- subset1[complete.cases(subset1),]
subset1 <- subset1[order(subset1[,2]),]
if(num == 'best'){
my_rank <- 1
} else if (num == 'worst'){
my_rank <- nrow(subset1)
} else {
my_rank <- num
}
subset1$Hospital.Name[my_rank]
}
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
?order
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = 'character')
## Check that state and outcome are valid
valid_state <- FALSE
for (i in unique(data$State)){
if(i == state){
valid_state <- TRUE
}
}
outcome_list <- as.list(c("heart attack", "heart failure", "pneumonia"))
valid_outcome <- FALSE
for (i in outcome_list){
if(i == outcome){
valid_outcome <- TRUE
}
}
if (valid_state == FALSE){
stop("invalid state")
}
if(valid_outcome == FALSE){
stop("invalid outcome")
}
## Return hospital name in that state with the given rank
## 30-day death rate
if(outcome == "heart attack"){
my_column <- 11
}
if(outcome == "heart failure"){
my_column <- 17
}
if(outcome == "pneumonia"){
my_column <- 23
}
data[,my_column] <- as.numeric(data[,my_column])
subset1 <- data[data$State == state, c(2, my_column)]
subset1 <- subset1[complete.cases(subset1),]
#subset1 <- subset1[order(subset1[,2]),]
subset1 <- subset1[order(2,1),]
if(num == 'best'){
my_rank <- 1
} else if (num == 'worst'){
my_rank <- nrow(subset1)
} else {
my_rank <- num
}
subset1$Hospital.Name[my_rank]
}
rankhospital("TX", "heart failure", 4)
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = 'character')
## Check that state and outcome are valid
valid_state <- FALSE
for (i in unique(data$State)){
if(i == state){
valid_state <- TRUE
}
}
outcome_list <- as.list(c("heart attack", "heart failure", "pneumonia"))
valid_outcome <- FALSE
for (i in outcome_list){
if(i == outcome){
valid_outcome <- TRUE
}
}
if (valid_state == FALSE){
stop("invalid state")
}
if(valid_outcome == FALSE){
stop("invalid outcome")
}
## Return hospital name in that state with the given rank
## 30-day death rate
if(outcome == "heart attack"){
my_column <- 11
}
if(outcome == "heart failure"){
my_column <- 17
}
if(outcome == "pneumonia"){
my_column <- 23
}
data[,my_column] <- as.numeric(data[,my_column])
subset1 <- data[data$State == state, c(2, my_column)]
subset1 <- subset1[complete.cases(subset1),]
#subset1 <- subset1[order(subset1[,2]),]
subset1 <- subset1[with (subset1, order(2,1)), ]
if(num == 'best'){
my_rank <- 1
} else if (num == 'worst'){
my_rank <- nrow(subset1)
} else {
my_rank <- num
}
subset1$Hospital.Name[my_rank]
}
rankhospital("TX", "heart failure", 4)
subsetest <- data[data$State == state, c(2, 17)]
subsetest <- outcome[outcome$State == state, c(2, 17)]
subsetest <- outcome[outcome$State == 'TX', c(2, 17)]
subset1 <- subsetest[with (subsetest, order(2,1)), ]
subset1 <- subsetest[with (subsetest, order(2)), ]
subset1 <- subsetest[order(subsetest[,2]),]
subset1 <- subsetest[order(subsetest[,c(2,1)]),]
subset1 <- subsetest[order(subsetest[,1]),]
View(subset1)
subset1 <- subsetest[order(subsetest[,2], subsetest[,1]),]
View(subset1)
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = 'character')
## Check that state and outcome are valid
valid_state <- FALSE
for (i in unique(data$State)){
if(i == state){
valid_state <- TRUE
}
}
outcome_list <- as.list(c("heart attack", "heart failure", "pneumonia"))
valid_outcome <- FALSE
for (i in outcome_list){
if(i == outcome){
valid_outcome <- TRUE
}
}
if (valid_state == FALSE){
stop("invalid state")
}
if(valid_outcome == FALSE){
stop("invalid outcome")
}
## Return hospital name in that state with the given rank
## 30-day death rate
if(outcome == "heart attack"){
my_column <- 11
}
if(outcome == "heart failure"){
my_column <- 17
}
if(outcome == "pneumonia"){
my_column <- 23
}
data[,my_column] <- as.numeric(data[,my_column])
subset1 <- data[data$State == state, c(2, my_column)]
subset1 <- subset1[complete.cases(subset1),]
#subset1 <- subset1[order(subset1[,2]),]
subset1 <- subset1[order(subset1[,2], subset1[,1]),]
if(num == 'best'){
my_rank <- 1
} else if (num == 'worst'){
my_rank <- nrow(subset1)
} else {
my_rank <- num
}
subset1$Hospital.Name[my_rank]
}
rankhospital("TX", "heart failure", 4)
submit()
submit()
submit()
submit()
56+16
16/25
18+16
19+8+4+8
18+8+4+8
38+18+16
